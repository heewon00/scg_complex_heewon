package com.edu.kt.gw.simple.common.filter;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import javax.crypto.SecretKey;

@Component
@Slf4j
public class AuthorizationHeaderFilter extends AbstractGatewayFilterFactory<AuthorizationHeaderFilter.Config>{

    //---------secretKey Î∂àÎü¨Ïò§Í∏∞---------
    @Value("${jwt.secret}")

    private String secretKey;

    private SecretKey getSigningKey() {
        byte[] bytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(bytes);
    }

    //--------------------------------


    //ÏÉùÏÑ±Ïãú Config classÎ•º ÏÉÅÏÜçÎ∞õÏùÄ FactoryÎ°ú ÎÑòÍ≤®Ï§òÏïºÌï¥ÏÑú lombokÏùÑ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ≥† Îã§ÏùåÍ≥º Í∞ôÏù¥ Ï≤òÎ¶¨
    public AuthorizationHeaderFilter(Environment env) {
        super(Config.class);
    }


    @NoArgsConstructor
    @AllArgsConstructor
    @Getter
    @Setter
    public static class Config {
        private String baseMessage;
        private boolean preLogger;
        private boolean postLogger;
    }

    //--------------------------------

    @Override
    public GatewayFilter apply(Config config) {
        return ((exchange, chain) -> {
            ServerHttpRequest request = exchange.getRequest();

            //headerÏóê HttpHeaders.AUTHORIZATION Í∞íÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
            if(!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)){
//                System.out.println("üö® no authorization header"+HttpStatus.UNAUTHORIZED);
                return onError(exchange, "no authorization header", HttpStatus.UNAUTHORIZED);
            }

            String authorizationHeader = request.getHeaders().get(org.springframework.http.HttpHeaders.AUTHORIZATION).get(0);
            String jwt = authorizationHeader.replace("Bearer ", "");
            System.out.println("üö® JWT : "+jwt);

            if(!isJwtValid(jwt)){
//                System.out.println("üö® JWT Token is not valid : "+HttpStatus.UNAUTHORIZED);
                return onError(exchange, "JWT Token is not valid", HttpStatus.UNAUTHORIZED);
            }

            return chain.filter(exchange);
        });
    }

    //tokenÏù¥ Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
    private boolean isJwtValid(String jwt) {
        boolean returnValue = true;

        Object subject = null;
        System.out.println("üö® secretKey : "+getSigningKey());

        try {
            subject = Jwts.parser()
                    .verifyWith(getSigningKey())
                    .build()
                    .parseSignedClaims(jwt)
                    .getPayload();
            System.out.println("üö® JWT Ïù∏Ï¶ù ÏÑ±Í≥µ! : "+subject);
        }catch (Exception e){
            returnValue = false;
        }

        if(subject == null || subject.equals("")){
            System.out.println("üö® subject : "+subject);
            returnValue = false;
        }
        return returnValue;
    }

    //ÏóêÎü¨ Î∞úÏÉùÏãú ÏóêÎü¨ Í∞íÏùÑ response
    //Mono, Flux -> Spring WebFlux Í∞úÎÖê / Îç∞Ïù¥ÌÑ∞ Îã®ÏúÑ Îã®Ïùº=Mono, Î≥µÏàò=Flux
    private Mono<Void> onError(ServerWebExchange exchange, String err, HttpStatus httpStatus) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(httpStatus);

        System.out.println("üö® Error : "+err);
        log.error(err);
        return response.setComplete();  //Mono Îç∞Ïù¥ÌÑ∞ return
    }
}